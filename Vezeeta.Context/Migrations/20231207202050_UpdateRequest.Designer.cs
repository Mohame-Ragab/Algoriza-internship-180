// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Context;

#nullable disable

namespace Vezeeta.Context.Migrations
{
    [DbContext(typeof(VezeetaContext))]
    [Migration("20231207202050_UpdateRequest")]
    partial class UpdateRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "13eae602-128b-49d8-9231-90114931379d",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "004470dd-c3ba-46e5-bd3e-5016d48807f5",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "Doctor01",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor02",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor03",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor04",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor05",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Patient01",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient02",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient03",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient04",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient05",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "1cd31656-a709-4cff-9672-454ab0fd25ce",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Veezeta",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJ18OteSZcog7lMdK/qQ2oaFEZ79djnkYFCTysPOfxCSNX1+51ldOC2QxBL8GJJ8Uw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65cbbea2-49bd-4772-b22e-3a6a54456fdb",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "Doctor01",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "8c18c10f-2530-4a0a-aa85-49a38c0cae4e",
                            Email = "doctor01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEISM6wA6R4JtmFb6mdIgaE85tLxsxAWIcbwBr3z3WopmhoaFpsX4N7o9FqslubYCrw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7993315-7d4d-414f-8e32-f9be55e217eb",
                            TwoFactorEnabled = false,
                            UserName = "doctor01@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor02",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "3ddb1400-b543-4db5-a80c-3775fdeb5fd3",
                            Email = "doctor02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPwUqhrbYDTbj6r9n+YwXnuQRh2yIi5UseFF3S2qfqC88DpSsdtulr2e1cG2CmDBJg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3993fa1-cd6b-4a9d-aaf9-482ba7fa0f6d",
                            TwoFactorEnabled = false,
                            UserName = "doctor02@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor03",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "bd9453dd-64b0-4c57-a6ce-7303b1571742",
                            Email = "doctor03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECFSbfjJAJzswvfZ4Ns+v4Q7mNV1GnRzN36X6bDyZ8Edh8CqR7BkR9dn8GCbEHh2Jg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40da798e-255f-4ce4-9967-cb18248809f3",
                            TwoFactorEnabled = false,
                            UserName = "doctor03@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor04",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "ffbc0677-1834-4e07-b5a4-a01352dafd08",
                            Email = "doctor04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHZZuFndnPZnAFZfuQ+MluTKstz4jPHq43ItFFi1aCy3EAZ4uvGvlMqtL40SdcGb/Q==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f530140-089e-4750-87df-78b308b5132b",
                            TwoFactorEnabled = false,
                            UserName = "doctor04@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor05",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "81774291-8440-40e0-8b24-799881488bd0",
                            Email = "doctor05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO76Uyn1q9XJYCuDhgsdUmme7KeQusXrIRGSr5THwk5mhODoluxcVqq+q8Lxq3g9Ng==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bc97fb8-5b75-41da-bf76-631ad14e31d6",
                            TwoFactorEnabled = false,
                            UserName = "doctor05@gmail.com"
                        },
                        new
                        {
                            Id = "Patient01",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "ebf27670-2333-471b-8afe-6f4319345e6f",
                            Email = "Patient01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 1",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQafEphjj6oZsI6xSxhFD1eXY15mpsX+pDUNt7RgqRQF8OdhRIyt1UMNIGnHMdLsg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9001d0c-73a5-4762-b68e-a58a02aae2fb",
                            TwoFactorEnabled = false,
                            UserName = "Patient01@gmail.com"
                        },
                        new
                        {
                            Id = "Patient02",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "68d46ecd-3b88-42a1-b6fc-93d377e43290",
                            Email = "Patient02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patientr",
                            Gender = 1,
                            LastName = "Num 2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJgZcMkgwF6sgPj7QfXPRtMKIahHaouICVvZMKVPljQrbp5OBmt5nzoCrmUK7/AVJA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26ad3816-4b12-4c6c-a3d9-c007a5dd855d",
                            TwoFactorEnabled = false,
                            UserName = "Patient02@gmail.com"
                        },
                        new
                        {
                            Id = "Patient03",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "82b40187-8426-4c44-9260-aa4371ff35d4",
                            Email = "Patient03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGVdACY+o8GwRrxz3paGnj2qP3g7xXspy2Ll6KteX2Gr9i0LIFXb8yjAIrzTBvEFEA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36597696-ff67-4936-9491-db553b98315a",
                            TwoFactorEnabled = false,
                            UserName = "Patient03@gmail.com"
                        },
                        new
                        {
                            Id = "Patient04",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "bfeffc6d-8588-47e9-b6ce-9ab37239a341",
                            Email = "Patient04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFZ/jxrvheDFBut+clA9mP+vR7heVjK9rZio+9Avtd8Zd1dc1cJiyTuzHwOeRHve8Q==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87f29876-35b0-406c-a2c1-9d2165fee687",
                            TwoFactorEnabled = false,
                            UserName = "Patient04@gmail.com"
                        },
                        new
                        {
                            Id = "Patient05",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "5e16906e-b741-4c96-a243-bf87ac662493",
                            Email = "Patient05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJNRuPREOv7uOJRBK7LiSMInRUMz1MuXNB3DbnBWKQNRCnkwnTi82JU0PxksfWBXqw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9be43ad3-4a11-4565-a756-76e2424e3da0",
                            TwoFactorEnabled = false,
                            UserName = "Patient05@gmail.com"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 0,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 2,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 3,
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 4,
                            DoctorId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DicountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NuberOfCompReqs")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DicountCode")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Doctor01",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror1Url",
                            Price = 100.0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Doctor02",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror2Url",
                            Price = 110.0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Doctor03",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror3Url",
                            Price = 105.0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Doctor04",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror4Url",
                            Price = 120.0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Doctor05",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror5Url",
                            Price = 90.0,
                            SpecializationId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Patient01",
                            DateOfBirth = new DateTime(2000, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient1Url"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Patient02",
                            DateOfBirth = new DateTime(2005, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient2Url"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Patient03",
                            DateOfBirth = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient3Url"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Patient04",
                            DateOfBirth = new DateTime(2017, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient4Url"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Patient05",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient5Url"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId")
                        .IsUnique()
                        .HasFilter("[TimeId] IS NOT NULL");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 100.0,
                            RequestStatus = 0,
                            TimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 105.0,
                            RequestStatus = 0,
                            TimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 110.0,
                            RequestStatus = 0,
                            TimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 120.0,
                            RequestStatus = 0,
                            TimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 3,
                            IsConfirmed = false,
                            PatientId = 3,
                            Price = 90.0,
                            RequestStatus = 0,
                            TimeId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pathology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeOfAppointment")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Vezeeta.Domain.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Vezeeta.Domain.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.HasOne("Vezeeta.Domain.Discount", "Discount")
                        .WithMany("Requests")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Time", "Time")
                        .WithOne("Request")
                        .HasForeignKey("Vezeeta.Domain.Request", "TimeId");

                    b.Navigation("Discount");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.HasOne("Vezeeta.Domain.Appointment", "Appointment")
                        .WithMany("Times")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
