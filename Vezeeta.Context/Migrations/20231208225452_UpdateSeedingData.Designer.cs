// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Context;

#nullable disable

namespace Vezeeta.Context.Migrations
{
    [DbContext(typeof(VezeetaContext))]
    [Migration("20231208225452_UpdateSeedingData")]
    partial class UpdateSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "13eae602-128b-49d8-9231-90114931379d",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "004470dd-c3ba-46e5-bd3e-5016d48807f5",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "Doctor01",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor02",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor03",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor04",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor05",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor06",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor07",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor08",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor09",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor10",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Patient01",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient02",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient03",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient04",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient05",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient06",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient07",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient08",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient09",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient10",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "4fe5a982-14a0-446a-a8e0-2c58aab0003c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Veezeta",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECyHPWQq5acnyea/6Nqq32fttANGtEWVLxy9dOndiGZvKZQ8E0ib5SwoXb3Qo/lLjQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7177123a-e344-4bec-9b5f-610c1cffc5b6",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "Doctor01",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "64e4294d-a3ba-4e05-a7de-f02985f98f66",
                            Email = "doctor01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJwH83hUOS16HkOxwLRak5SlUklvWayx5EAOoHPsVxmOG8w3ojXjxN1Tz+7xJNDGyg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e33e8853-279d-437c-9520-30f67079c564",
                            TwoFactorEnabled = false,
                            UserName = "doctor01@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor02",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "084094f0-8e01-436c-a2c8-e6cf7c3f41bc",
                            Email = "doctor02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmSQvtTWXW5EgJ8TaSrkFSIAsk/0++/+Aib35tHjHkrLPPw8e6iMQTb9nF44+HwdA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a69ef763-0603-481f-b9ec-b51ece335267",
                            TwoFactorEnabled = false,
                            UserName = "doctor02@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor03",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "891392a5-c259-49af-8535-7a3b950196ee",
                            Email = "doctor03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpJLn4hak1UOzYFG2pEMLoUPjgu6RP9fKAD7AtIGey5hptQ73p24KSqnkkYCmwPiw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3acbd71-0f7c-450b-b2be-b0f14c2698da",
                            TwoFactorEnabled = false,
                            UserName = "doctor03@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor04",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "141eeb4a-243f-47a9-aeb3-a5312e89333b",
                            Email = "doctor04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcyJ6QGEHt6GGCBtCbb9cBg1huxIJt7oG2M/icFAQo1v7hjUidu2H07/b4ajzJeoA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "617a1a07-526a-434c-ad67-667a51c43ae4",
                            TwoFactorEnabled = false,
                            UserName = "doctor04@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor05",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "d3e658c2-d964-4689-9140-f77bc5260e9e",
                            Email = "doctor05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpX1uKeZIVNZpZfj7hIwU1biWzTig9F52PE5Ke78hFMWk2nNf+i2wJ6e0bNhuDOJw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b614d93-08f1-464a-935a-70673de1931f",
                            TwoFactorEnabled = false,
                            UserName = "doctor05@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor06",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "cc79f09a-dcc1-42ba-b92c-f4f12515fcac",
                            Email = "doctor06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1DsBqw1fd+LM9pXr182nPcPta2xkOEQYePm8or7NclzxnhYbFuRMioc1+5xL0pKA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3138b007-54bb-41ca-bc98-70fcd5d1ef71",
                            TwoFactorEnabled = false,
                            UserName = "doctor06@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor07",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "7eadecf2-14e6-4dd5-b0a9-d9f6650dc696",
                            Email = "doctor07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFaMiZzVTnGdaifCQUjpYv90Eb+ljOQ7F7utqf1zzJswSA4mty+BTPZCNe+CQI2pXw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16835943-3923-477c-9edc-ebe8e6db0435",
                            TwoFactorEnabled = false,
                            UserName = "doctor07@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor08",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "9efad617-0f8d-47e1-b001-e5bf07118564",
                            Email = "doctor08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNdxgGP5N6fUdFjWOKGkbXvjEj81biGLgNvjvyqs5dEq7Ak24anhzfHosrssedIag==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fa56e60-86e1-4abe-bcbf-e7c971864840",
                            TwoFactorEnabled = false,
                            UserName = "doctor08@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor09",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "2d98e588-56aa-488c-b918-3c26b63dc1cc",
                            Email = "doctor09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECpeHuuPDsryUg3NeWx8wiBybGIXy21GiFw1LFSq0K92vxqgTgWBivhk5zmTmV8anw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1f95e8f-0a00-4871-8658-73174b61adfc",
                            TwoFactorEnabled = false,
                            UserName = "doctor09@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor10",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "8913dacf-0f61-4818-8b08-d0b1a1f92286",
                            Email = "doctor10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGi4fbR8UUw4L7ONfmyUQ+RXd5uxqUiTZaZ8GetbShkXIsHEP4M44zcVSJvO/dp46g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29fc483b-2e5e-4c9e-a4fc-451114e63373",
                            TwoFactorEnabled = false,
                            UserName = "doctor10@gmail.com"
                        },
                        new
                        {
                            Id = "Patient01",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "5a51095c-7afb-4761-97d2-35a79c255e5a",
                            Email = "pateint01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQjSzWy43cvUYCZl5MapBMi+VlQyXw087QLzWkjR5+zBcjV/v1z4vO2KfOVC4QmVw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2376447-04e5-4fe3-9d81-32be70c8eee9",
                            TwoFactorEnabled = false,
                            UserName = "pateint01@gmail.com"
                        },
                        new
                        {
                            Id = "Patient02",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "ab31eead-ba75-4c2a-b685-7e3228be1e4d",
                            Email = "pateint02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFrNy4zNFBX4bxKaFoDFZVGKXgkzbmy0BtL0QjhbXgol++gEPLdq8EjawlUjfsxw8g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06c3b657-e12f-47bc-839a-2ae76b3fe87f",
                            TwoFactorEnabled = false,
                            UserName = "pateint02@gmail.com"
                        },
                        new
                        {
                            Id = "Patient03",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "69656d46-dac5-4e8e-b2ac-d910fa82a22a",
                            Email = "pateint03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8EjPkQKwVOhrHnrWgrjKBycQv8wX04B83hD/JgufjPqbAvhQ/bgEZHVosLK3IrQg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c9ed0f7-26a2-4cbe-98d2-f5269919050d",
                            TwoFactorEnabled = false,
                            UserName = "pateint03@gmail.com"
                        },
                        new
                        {
                            Id = "Patient04",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "7da9800d-b1a0-4887-83c3-2ff920d5a4ce",
                            Email = "pateint04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9/fkG2pnmt99RXqeEvv+l6QaVBe2aVJL79Vxbjkz4N69elIFu2nwWFlPxBZziZ6A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13498e1f-4ec1-4892-b3af-cab17d9bb6ad",
                            TwoFactorEnabled = false,
                            UserName = "pateint04@gmail.com"
                        },
                        new
                        {
                            Id = "Patient05",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "90ec9a9e-546f-401b-9e7a-dd9feade70b5",
                            Email = "pateint05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMC1ArD9YVqjF5s8tUNOmOsh6gzPsH8/TjOZexFV9b6yD55MlxFx8fGELuzwvud9Yg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "531c4970-c0cc-4894-be76-0f015910f09d",
                            TwoFactorEnabled = false,
                            UserName = "pateint05@gmail.com"
                        },
                        new
                        {
                            Id = "Patient06",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "028db063-dacb-4428-b6b2-6eae255904c7",
                            Email = "pateint06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELoBtYbMG2gSq2BqEkIt93yPxX8Rgh9hjshd0yhW+00trWKNsMs25W92d92Nxax1JA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8f6ad4-dd2e-4ba4-a629-7c89402c6a9e",
                            TwoFactorEnabled = false,
                            UserName = "pateint06@gmail.com"
                        },
                        new
                        {
                            Id = "Patient07",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "4ec145f0-715e-4a6d-968b-9ecc81c2ae8b",
                            Email = "pateint07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7KPj6JO8KF/8LCcOM8ZY8JnVlsxQxuDBMJ2GJkhJhtvhSzBA+Z5xgM6weS2huQhQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2be64d2b-150f-48a4-ac52-6e54ab8219da",
                            TwoFactorEnabled = false,
                            UserName = "pateint07@gmail.com"
                        },
                        new
                        {
                            Id = "Patient08",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "0bb2aa7b-2ece-4e83-bc0a-bb0380b246b9",
                            Email = "pateint08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHx2CfV+NUgwU3S9gUqcnS/omQLleu3yg4w++a2WfMpaCp19RrLKoRk+cmXjHPw2ag==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efdad141-bf98-46a1-98ed-86464e5b5cb8",
                            TwoFactorEnabled = false,
                            UserName = "pateint08@gmail.com"
                        },
                        new
                        {
                            Id = "Patient09",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "f081d828-93d9-48c3-af00-b74f37e47da8",
                            Email = "pateint09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO61CnLcamuMop7q5pNPCer+KWE6E12KZNPLAN1dwEJ8DrY710rddKNx68OCShn8+A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f09ecb4-3040-44e1-982f-239c8e1a8fc0",
                            TwoFactorEnabled = false,
                            UserName = "pateint09@gmail.com"
                        },
                        new
                        {
                            Id = "Patient10",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "2ddae163-50b6-4b7a-876d-41d0347bb208",
                            Email = "pateint10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPghPbfCXO28ZeMwrOI+gFXRDxFzfuEtMI2ygbmey1KgRiLBW7OXq6GvSmiJ0LlA5g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a624e055-7965-4618-a71d-29559ffc45c3",
                            TwoFactorEnabled = false,
                            UserName = "pateint10@gmail.com"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 0,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 2,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 3,
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 4,
                            DoctorId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DicountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NuberOfCompReqs")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DicountCode")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Doctor01",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror1Url",
                            Price = 100.0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Doctor02",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror2Url",
                            Price = 110.0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Doctor03",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror3Url",
                            Price = 105.0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Doctor04",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror4Url",
                            Price = 120.0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Doctor05",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror5Url",
                            Price = 90.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Doctor06",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror6Url",
                            Price = 140.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Doctor07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror7Url",
                            Price = 190.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Doctor08",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror8Url",
                            Price = 95.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Doctor09",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror9Url",
                            Price = 80.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Doctor10",
                            DateOfBirth = new DateTime(1990, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror0Url",
                            Price = 135.0,
                            SpecializationId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Patient01",
                            DateOfBirth = new DateTime(2000, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient1Url"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Patient02",
                            DateOfBirth = new DateTime(2005, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient2Url"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Patient03",
                            DateOfBirth = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient3Url"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Patient04",
                            DateOfBirth = new DateTime(2017, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient4Url"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Patient05",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient5Url"
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Patient06",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient06Url"
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Patient07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient07Url"
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Patient08",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient08Url"
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Patient09",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient09Url"
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Patient10",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient10Url"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId")
                        .IsUnique()
                        .HasFilter("[TimeId] IS NOT NULL");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 100.0,
                            RequestStatus = 0,
                            TimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 105.0,
                            RequestStatus = 0,
                            TimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 110.0,
                            RequestStatus = 0,
                            TimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 120.0,
                            RequestStatus = 0,
                            TimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 3,
                            IsConfirmed = false,
                            PatientId = 3,
                            Price = 90.0,
                            RequestStatus = 0,
                            TimeId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pathology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeOfAppointment")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Vezeeta.Domain.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Vezeeta.Domain.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.HasOne("Vezeeta.Domain.Discount", "Discount")
                        .WithMany("Requests")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Time", "Time")
                        .WithOne("Request")
                        .HasForeignKey("Vezeeta.Domain.Request", "TimeId");

                    b.Navigation("Discount");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.HasOne("Vezeeta.Domain.Appointment", "Appointment")
                        .WithMany("Times")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
