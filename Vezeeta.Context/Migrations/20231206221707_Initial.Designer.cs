// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Context;

#nullable disable

namespace Vezeeta.Context.Migrations
{
    [DbContext(typeof(VezeetaContext))]
    [Migration("20231206221707_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "13eae602-128b-49d8-9231-90114931379d",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "004470dd-c3ba-46e5-bd3e-5016d48807f5",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "Doctor01",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor02",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor03",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor04",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor05",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Patient01",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient02",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient03",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient04",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient05",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "e47dabbd-7f10-46d7-a0f1-902ecad691f7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Veezeta",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKQmCQBu/FP1xZkewsI8ZW/gzfobhnX1r7125rOgOGhBxbPrKgrPGkL93lsETk8gQw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19a29855-48ef-4c4d-b796-1809ccb6ba44",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "Doctor01",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "9f431d6f-48ac-46fd-83fb-cbe45ecee7b9",
                            Email = "doctor01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM55EqyCZa1W/B8/jGnz41sKuqb4Hn5i4ISOIOqto5AgOcJYX5njPqcBOinuwvlqZA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00a12084-7136-44a4-a88f-f12fd03e8231",
                            TwoFactorEnabled = false,
                            UserName = "doctor01@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor02",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "d9d4d126-56f5-428d-be0d-f4c857b40002",
                            Email = "doctor02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHUIZ0x2Tr3nZLtUofNln9mDF/d2EPPXj4kxOSni0flmC+lClhwLOLhst0GFILyrZQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4234f282-7743-4555-9380-8e2b1ac5bf76",
                            TwoFactorEnabled = false,
                            UserName = "doctor02@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor03",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "e9597a9a-644b-4ff2-8cbb-8dda22a6e447",
                            Email = "doctor03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHiH2EY3VIqVs2+EShWyxdAF7kICGSeBdMl67onYA+mOfzykGIMVcO2kcUjIC29Onw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "484ab764-103c-405a-8d99-5d742bba28fa",
                            TwoFactorEnabled = false,
                            UserName = "doctor03@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor04",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "77b37962-2a3b-4fed-ae84-f222d9e27351",
                            Email = "doctor04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEzgLuyePQbWQpfxtOJGHZl4gKK3WsIErxUF5BAC/ZMghsdjB1XixeAH8nRlEt8XkA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b7482c0-75b0-4b63-a9f4-fd4da0bed650",
                            TwoFactorEnabled = false,
                            UserName = "doctor04@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor05",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "44d9517c-3aa8-46b5-9ce1-05a3e5a8ce6e",
                            Email = "doctor05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPTakrThZsTNljQUgIspkO9/bwWL65DUSavqkmVI00r+zfllG4F6/UwVJNCcyAhNIg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72e6ad22-d4ea-476f-babe-d67955586c5a",
                            TwoFactorEnabled = false,
                            UserName = "doctor05@gmail.com"
                        },
                        new
                        {
                            Id = "Patient01",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "2f687158-f0f9-4334-ba78-1ca3c6dde6a2",
                            Email = "Patient01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 1",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZmu7/jAzKOvwvtn8P6UkCWGZp45KbqhIaso3zcfMhFwUwIeaXOlh8aNuOhmDsWGQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d865d24-0c22-47b3-bd89-efa22a952c5a",
                            TwoFactorEnabled = false,
                            UserName = "Patient01@gmail.com"
                        },
                        new
                        {
                            Id = "Patient02",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "936c004e-0a84-49cf-8ae7-6ed243bb6d13",
                            Email = "Patient02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patientr",
                            Gender = 1,
                            LastName = "Num 2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFgauCjBii1w0q0QcT1DGtCrHvUKLtmSfVUhoVY+4bB7TNbdBUYmMQYc4nEPwvKg1w==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3cac2cec-188f-4a25-b83e-552fb90d0c84",
                            TwoFactorEnabled = false,
                            UserName = "Patient02@gmail.com"
                        },
                        new
                        {
                            Id = "Patient03",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "31ff0e78-9ea9-45fe-8c7a-e444c1080d91",
                            Email = "Patient03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL2t2T4ryZkOvoVJ8SCf+vZHhYfWOwvi4j93w5hRDBCYe60f+XBJb8FwomyCMZj3WA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44453093-6a79-4a4c-9225-8b871055d2af",
                            TwoFactorEnabled = false,
                            UserName = "Patient03@gmail.com"
                        },
                        new
                        {
                            Id = "Patient04",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "57b1f50e-ca29-4065-93b3-ce7356f0d50a",
                            Email = "Patient04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEG/XAFOivj1ZuBDN7kvDM8ltdgQR1SeP/CkeTvEVWLjjiXaydaOJPXxJM6Oklh6kew==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15c1c10c-0a7c-41af-82b1-2717b9a4ddca",
                            TwoFactorEnabled = false,
                            UserName = "Patient04@gmail.com"
                        },
                        new
                        {
                            Id = "Patient05",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "b164bbe2-1854-4bdb-8f82-f7cfa38194da",
                            Email = "Patient05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELIvrdZ1xjkV5Q9cOdDCHn+xHP+lBqAghZUXOxKCiTDql51wMDDj2T3IKk5f6srYfQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78afb3b3-8cd7-458a-8add-9a9f7b63e562",
                            TwoFactorEnabled = false,
                            UserName = "Patient05@gmail.com"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 0,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 2,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 3,
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 4,
                            DoctorId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DicountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NuberOfCompReqs")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Doctor01",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror1Url",
                            Price = 100.0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Doctor02",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror2Url",
                            Price = 110.0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Doctor03",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror3Url",
                            Price = 105.0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Doctor04",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror4Url",
                            Price = 120.0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Doctor05",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror5Url",
                            Price = 90.0,
                            SpecializationId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Patient01",
                            DateOfBirth = new DateTime(2000, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient1Url"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Patient02",
                            DateOfBirth = new DateTime(2005, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient2Url"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Patient03",
                            DateOfBirth = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient3Url"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Patient04",
                            DateOfBirth = new DateTime(2017, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient4Url"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Patient05",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient5Url"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId")
                        .IsUnique();

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 100.0,
                            RequestStatus = 0,
                            TimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 105.0,
                            RequestStatus = 0,
                            TimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 110.0,
                            RequestStatus = 0,
                            TimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 120.0,
                            RequestStatus = 0,
                            TimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            IsConfirmed = false,
                            PatientId = 3,
                            Price = 90.0,
                            RequestStatus = 0,
                            TimeId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pathology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeOfAppointment")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Vezeeta.Domain.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Vezeeta.Domain.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.HasOne("Vezeeta.Domain.Discount", "Discount")
                        .WithMany("Requests")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Vezeeta.Domain.Doctor", null)
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Vezeeta.Domain.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Time", "Time")
                        .WithOne("Request")
                        .HasForeignKey("Vezeeta.Domain.Request", "TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Patient");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.HasOne("Vezeeta.Domain.Appointment", "Appointment")
                        .WithMany("Times")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
