// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Context;

#nullable disable

namespace Vezeeta.Context.Migrations
{
    [DbContext(typeof(VezeetaContext))]
    partial class VezeetaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "13eae602-128b-49d8-9231-90114931379d",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "004470dd-c3ba-46e5-bd3e-5016d48807f5",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "Doctor01",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor02",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor03",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor04",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor05",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor06",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor07",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor08",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor09",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor10",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Patient01",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient02",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient03",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient04",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient05",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient06",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient07",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient08",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient09",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient10",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "3d700024-bbf4-41db-b5e7-a8e003ea70f5",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Veezeta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFRyVa1mH1YaEKCBIueeZselqm03yO/x45vZUNJFuGfAkyppLZbbi5fAE0FYicNDjA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0d5b1c6-7b72-48b0-a11c-7ac699501a29",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "Doctor01",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "607466e1-13f7-4a9a-9a41-5943463f1970",
                            Email = "doctor01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECN+SozmxxMIg/ggINwIClxyT1ccSfSIifCQ93kpQrutR8ze3LfNe2LyGmynhYoHrQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfd7fd42-5c1c-49c7-ad63-ea6e91b044e6",
                            TwoFactorEnabled = false,
                            UserName = "doctor01@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor02",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "6888511a-5b43-4eb3-ad23-fdbd0a2433f8",
                            Email = "doctor02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0YYGjK8umBxIq304DJ9DhHz3cavWPrMtfCFZaNcai3FU/d/LBKxM+4KL+5PlfZbA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa4ddc4e-24fc-4f67-847e-9137c1278491",
                            TwoFactorEnabled = false,
                            UserName = "doctor02@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor03",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "25f1e917-4559-4f35-ae68-d4947ecb0293",
                            Email = "doctor03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJhAq4W85Jack7AOxGvm1gX+YpPHfuBJIrdTG+azjscoiANd+JW9UQlGPno+XvvTWw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e2e1971-eb9e-4818-8a52-44996208e7b6",
                            TwoFactorEnabled = false,
                            UserName = "doctor03@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor04",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "4c3781f0-cbec-404e-9186-2dfa2a6f4f26",
                            Email = "doctor04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPWpriSPJWl6UyIXREgRKpQ+CX+iiC8GbB4gGV9novDX7Pbh3VL3WoWVyF1/8pP77Q==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a94cc29e-d639-491f-95c1-a56f4a1b0f02",
                            TwoFactorEnabled = false,
                            UserName = "doctor04@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor05",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "6428ab88-64c1-4726-ad5c-b308e70cca46",
                            Email = "doctor05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5aINcr5sEIRx70JwHqeDj/xlbj1rot5fWNa+kXLkgUhquljQqVHKTFAxx463kwBg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e44abf1b-6607-4fc3-b41d-404c38d0023e",
                            TwoFactorEnabled = false,
                            UserName = "doctor05@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor06",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "6e2cf833-e818-4422-8130-3c179eb3632c",
                            Email = "doctor06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFB4fDARcdMnblQ1e5YScb42Eh+JAkOXllx3nhr+MEgunMGxonMvzEdsJhXMYQGLw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "141d911c-079a-4f79-811b-2cd3752ed170",
                            TwoFactorEnabled = false,
                            UserName = "doctor06@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor07",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "db60246c-edcc-41af-b9a7-e8aec1ad72c5",
                            Email = "doctor07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQSzjdnjYDt753HaQzplFseYU2S6ZAw+TgQBp8N6Dq/RhBPNkDB+OheEQOrNAYc4A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc275f49-5dde-44fa-99e4-76e8f91884ac",
                            TwoFactorEnabled = false,
                            UserName = "doctor07@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor08",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "e1f262fc-2966-4264-93ea-98066b7ed5dc",
                            Email = "doctor08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7pNoRJLPG4R3UTL8CmBbb85S1s9WlFgJ3vwkYCGiIz9ngiNCHNuOuAoMA8/krq1g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d18773c6-962f-42b0-98ef-051391664e62",
                            TwoFactorEnabled = false,
                            UserName = "doctor08@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor09",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "04c13cdd-fd99-49ff-a2b8-8cde63ce2747",
                            Email = "doctor09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEER2PzhqccLBnD/Z7qhA7UsvMsbg6sXmP6V5o3HaqWeCUuWuMm7g+OL1fqd65LZ9YQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5c60e57-8a6a-4828-b7da-ac567f011445",
                            TwoFactorEnabled = false,
                            UserName = "doctor09@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor10",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "398d9d0d-823d-4f31-aa71-840d4c06cd91",
                            Email = "doctor10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVGFKtZIoUR6jN3F+CzyUmz/yaX2wD8r0GuJbacPqugeC+PA0ldsq6r9sXrhWlFxA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ebf668d-a0cf-4aa4-8779-856069072f94",
                            TwoFactorEnabled = false,
                            UserName = "doctor10@gmail.com"
                        },
                        new
                        {
                            Id = "Patient01",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "4736e45b-290b-4bd6-b306-137039274d1f",
                            Email = "pateint01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHesljNuulTp3vkbxLhvQCnrI3zl5M9yKfIiBO6+sfWnh8toOwF+2T/PWttpqcp5Ng==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "676486b5-6fc0-4ff7-a864-29802790f2ce",
                            TwoFactorEnabled = false,
                            UserName = "pateint01@gmail.com"
                        },
                        new
                        {
                            Id = "Patient02",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "ae8d5c30-e108-47ac-97c3-2bcd6ba2a25c",
                            Email = "pateint02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOqdB1XK4BjuPCjOpErKOC5SXWlYOU/qS+FkwU+k8UVjIsy6HE7mvCdqBQfF0nLJBA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddc72f29-5eaa-4b10-b529-ea0a31f5e23f",
                            TwoFactorEnabled = false,
                            UserName = "pateint02@gmail.com"
                        },
                        new
                        {
                            Id = "Patient03",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "211b29fe-99c4-4885-9aa9-27d27a0458cb",
                            Email = "pateint03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHMAFwyIt5uVqHxEj0i3edn3YF4rkTQ9oATPESl91j13TsA3+ivt723jfn+AD7lurA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e805e978-a3da-4056-bcad-a017adad616a",
                            TwoFactorEnabled = false,
                            UserName = "pateint03@gmail.com"
                        },
                        new
                        {
                            Id = "Patient04",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "c0c6b6b4-36c3-417c-ad0a-1f58c3185b8d",
                            Email = "pateint04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPc5hAj5RkIXEfW+v4VNmWqSNB87A2Jne8VvkjrG/BhTBOIhk7V7sp+RmFI+/bPzMw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91499dad-9c88-48d5-bea7-0c8e169c1860",
                            TwoFactorEnabled = false,
                            UserName = "pateint04@gmail.com"
                        },
                        new
                        {
                            Id = "Patient05",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "259ac880-b569-45aa-9f1a-e63270e6bea6",
                            Email = "pateint05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL8rcUdEIk37lSina+WL4XeVRbebb3tLEj0K2HCoI5B81ivM3MY3YCSZhAWt27etmw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14cdd57b-be8b-4a4d-82f4-0bd8e866bff6",
                            TwoFactorEnabled = false,
                            UserName = "pateint05@gmail.com"
                        },
                        new
                        {
                            Id = "Patient06",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "3ba9ddd2-294f-4ade-af19-c67b49cc2f63",
                            Email = "pateint06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcGh5JxhsZZsY5dkfRAgGlec3rOXsjauLpwyymtT5dw1Cvuav+o7T1y8e+RCmqC8A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "709853a5-8765-47c3-9707-44b125d104ea",
                            TwoFactorEnabled = false,
                            UserName = "pateint06@gmail.com"
                        },
                        new
                        {
                            Id = "Patient07",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "02b19cf4-af4d-4b73-a0de-a684e2322963",
                            Email = "pateint07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/MLx5gifivpL6P/XU6vEzCmPRcWlgm784iKFhFvmx8v/FRnadw3vNiYSjWoLE6fQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38a5e278-8f2c-4adc-8306-df716b20c499",
                            TwoFactorEnabled = false,
                            UserName = "pateint07@gmail.com"
                        },
                        new
                        {
                            Id = "Patient08",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "276bc4f5-a13c-44c1-8e22-91f13c149863",
                            Email = "pateint08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiNTD2PfeNJFb8O5juMuUZ/EZhUhmleQQi6o96N/MEKZJjJQXT14kigi2KRjvqVjg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e79b7a30-4d93-4234-8ee6-d15a0481e536",
                            TwoFactorEnabled = false,
                            UserName = "pateint08@gmail.com"
                        },
                        new
                        {
                            Id = "Patient09",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "d2213d8d-f49f-46db-8a34-b7fba1ad4d8d",
                            Email = "pateint09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAK31aUteh8nNwgdFiLmRPpQ7RYl5Lq9aCjgR4KwA7E6Xr+LjoXAoHvFoa0162j1tg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bed0be6-5638-4fb4-908e-5fcde7995f1d",
                            TwoFactorEnabled = false,
                            UserName = "pateint09@gmail.com"
                        },
                        new
                        {
                            Id = "Patient10",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "546f7d69-6d6b-46b5-bb84-1bd8499d8f45",
                            Email = "pateint10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7VBpkm/qljoXRDGYhsqbZnzNvrDfJPKALMJlPuHducWyUQpHkc5V84JXPiIwwmcQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d2b1eef-edf7-4678-9021-4abbda4e2709",
                            TwoFactorEnabled = false,
                            UserName = "pateint10@gmail.com"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 0,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 2,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 3,
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 4,
                            DoctorId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DicountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NuberOfCompReqs")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DicountCode")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Doctor01",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror1Url",
                            Price = 100.0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Doctor02",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror2Url",
                            Price = 110.0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Doctor03",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror3Url",
                            Price = 105.0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Doctor04",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror4Url",
                            Price = 120.0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Doctor05",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror5Url",
                            Price = 90.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Doctor06",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror6Url",
                            Price = 140.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Doctor07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror7Url",
                            Price = 190.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Doctor08",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror8Url",
                            Price = 95.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Doctor09",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror9Url",
                            Price = 80.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Doctor10",
                            DateOfBirth = new DateTime(1990, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror0Url",
                            Price = 135.0,
                            SpecializationId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Patient01",
                            DateOfBirth = new DateTime(2000, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient1Url"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Patient02",
                            DateOfBirth = new DateTime(2005, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient2Url"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Patient03",
                            DateOfBirth = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient3Url"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Patient04",
                            DateOfBirth = new DateTime(2017, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient4Url"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Patient05",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient5Url"
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Patient06",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient06Url"
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Patient07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient07Url"
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Patient08",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient08Url"
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Patient09",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient09Url"
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Patient10",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient10Url"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId")
                        .IsUnique()
                        .HasFilter("[TimeId] IS NOT NULL");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 100.0,
                            RequestStatus = 0,
                            TimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 105.0,
                            RequestStatus = 0,
                            TimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 110.0,
                            RequestStatus = 0,
                            TimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 120.0,
                            RequestStatus = 0,
                            TimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 3,
                            IsConfirmed = false,
                            PatientId = 3,
                            Price = 90.0,
                            RequestStatus = 0,
                            TimeId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pathology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeOfAppointment")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Vezeeta.Domain.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Vezeeta.Domain.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.HasOne("Vezeeta.Domain.Discount", "Discount")
                        .WithMany("Requests")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Time", "Time")
                        .WithOne("Request")
                        .HasForeignKey("Vezeeta.Domain.Request", "TimeId");

                    b.Navigation("Discount");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.HasOne("Vezeeta.Domain.Appointment", "Appointment")
                        .WithMany("Times")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
