// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Context;

#nullable disable

namespace Vezeeta.Context.Migrations
{
    [DbContext(typeof(VezeetaContext))]
    [Migration("20231210193126_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "13eae602-128b-49d8-9231-90114931379d",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "004470dd-c3ba-46e5-bd3e-5016d48807f5",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "Doctor01",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor02",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor03",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor04",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor05",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor06",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor07",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor08",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor09",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Doctor10",
                            RoleId = "13eae602-128b-49d8-9231-90114931379d"
                        },
                        new
                        {
                            UserId = "Patient01",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient02",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient03",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient04",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient05",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient06",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient07",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient08",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient09",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        },
                        new
                        {
                            UserId = "Patient10",
                            RoleId = "004470dd-c3ba-46e5-bd3e-5016d48807f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "af6667e4-c5cb-4844-8b39-ded9282b29b8",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Veezeta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPh2+78ekKFwUq8hs2mdD6IT8ANLx7uOUjXn41b5/iJ2cDynh4Y9OLlal/m/gCV8ag==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d92809c6-9632-477f-8d0c-9f5f7b9348f0",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "Doctor01",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "b577a156-977b-471c-bcba-c85344d3752e",
                            Email = "doctor01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4RjCA22BUKPE6w2ekTYFcVz6iC8a85vFlMkxZLMfwjUMMYrOeHiPZXYwq2VTdk7A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a5aeb82-9289-4e5d-ba59-11e858552f76",
                            TwoFactorEnabled = false,
                            UserName = "doctor01@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor02",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "d9b05c14-1edf-4122-8e6c-2e376537a41c",
                            Email = "doctor02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1FChnAsFMUn/N6lY0KB2bx0S4SVKi5hSS6SFVNqKrA7z+mBpHbA6ElJE6SzB2rIw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5128c649-d168-477a-9268-61d3204b0904",
                            TwoFactorEnabled = false,
                            UserName = "doctor02@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor03",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "b8ec2c3f-98d7-4a40-ab60-e1daa321ca6b",
                            Email = "doctor03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP55g1MWAF4mvCjbHnhXN9kUIeThG73q4t1bfPtaxo+DvHpiI9F0ECdc55db8DKjGA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3187eab-ae55-4caf-8b26-d366cbdc2219",
                            TwoFactorEnabled = false,
                            UserName = "doctor03@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor04",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "da016b6d-f83c-4157-af43-68001947f6dd",
                            Email = "doctor04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPoER5fbSaAsksHoyrjSLo/JiCCYcvLRDXTE/o+mjoDDm0PxAPjQZflO46JW337mw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d31b6e32-8f48-4ae4-8bf3-8978a9c5f076",
                            TwoFactorEnabled = false,
                            UserName = "doctor04@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor05",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "d79fa97a-2544-4d88-9224-1f3114c89d86",
                            Email = "doctor05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP0tBlZ6ay4NPDJrViL7BAioEyZHJnWyPEkCVE2YGuQleDs3zD/amA1CKTUzGo8NTQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54273c8f-b658-4c58-a49d-2be351228e2e",
                            TwoFactorEnabled = false,
                            UserName = "doctor05@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor06",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "082c462f-9382-4a61-b7ba-b7a2aed9b51d",
                            Email = "doctor06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELjtDZFROSyFlBiZxqLwneXcgkGW8f0rqD0kZnsGuiMc4871tHpWGtF1Baa5uHgYmQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad2dbda5-9991-4315-9f0a-57ce86f85c5d",
                            TwoFactorEnabled = false,
                            UserName = "doctor06@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor07",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "0e13b4af-0a3f-4c7b-99e3-563f93783e78",
                            Email = "doctor07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFirVaD/m63qUqg0oOlPP0lGZjaLFL/+kyMb3diFSYeGnbMvMcg99pyj41L+tkzeag==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30df2bdd-c647-499b-b0cb-774eb0c463d1",
                            TwoFactorEnabled = false,
                            UserName = "doctor07@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor08",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "4aa29ac2-f07a-4a6f-8f49-3c73851a27be",
                            Email = "doctor08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECX0ZV7mDVnad97vqPIWx30eED6j/c8qE5kcDd9Z7xxQjvgsDxgEeNf3k7I8eOk17g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4009fccd-9ea6-474b-ab24-f43bfe440324",
                            TwoFactorEnabled = false,
                            UserName = "doctor08@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor09",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "973035ab-bf4f-4e7b-a6bb-9d03b415248d",
                            Email = "doctor09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELAWQ/KD5fgsfMMXSfw9Qxg6g7AermUqi6Mx83YZh0d5lMj1kR+2s5q9SRGnDwAmKw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2aee569a-bf90-4315-8ff3-4210e5e3fe2f",
                            TwoFactorEnabled = false,
                            UserName = "doctor09@gmail.com"
                        },
                        new
                        {
                            Id = "Doctor10",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "39a980ff-6ded-43f5-9a28-c5abf0e682f3",
                            Email = "doctor10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Doctor",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDe71DSbzWg2WVNczR7nkD0Mg/l4/nyrgHPuFwjbjMaGlVoiDDmkqLecXxGiW8fB+g==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c848e24-d87e-4087-9da7-b1a51e635e61",
                            TwoFactorEnabled = false,
                            UserName = "doctor10@gmail.com"
                        },
                        new
                        {
                            Id = "Patient01",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "cac483c4-9f31-4ae7-97ad-daabf515f4f2",
                            Email = "pateint01@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 01",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRRoH3dYVyehlgWc3GPnEPh5SKDt7p8DSiukCG1jiz/47hcGk2IFPfXDGA9jI4aRA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06025293-93a8-4484-bcd7-e89f5a674e78",
                            TwoFactorEnabled = false,
                            UserName = "pateint01@gmail.com"
                        },
                        new
                        {
                            Id = "Patient02",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "88643bd2-c8dd-4199-b42a-2c1371f0942b",
                            Email = "pateint02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 02",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1IIn387Z2hcp9S7DOIrpG9b4oWNWI/XmZuSEGZfD/D4dtZTzdKjRrCb1HPsY1ZDA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdff2f90-b6a4-4cc8-b544-269a78091efd",
                            TwoFactorEnabled = false,
                            UserName = "pateint02@gmail.com"
                        },
                        new
                        {
                            Id = "Patient03",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "ca20da26-bd62-47fd-9162-a0e2685210a9",
                            Email = "pateint03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 03",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrdEQoFIoHMkvVM9sckmcNXdkhefsQzI+J7bSWEA+iNw2AtzY+dx9fT+5P1ZoloeQ==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aedb83d9-f7c7-4194-8ccd-ba4d01c8b86f",
                            TwoFactorEnabled = false,
                            UserName = "pateint03@gmail.com"
                        },
                        new
                        {
                            Id = "Patient04",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "a9386c13-f32d-401f-9909-fe7bb3c4bca0",
                            Email = "pateint04@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 04",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT04@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2laJxl0oLQNhNNsw4CX/iIVg+ePIILqrb/mHUR4OmhBEU/15iy55RCVswAWf/8xA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad330682-260e-4df1-b5e3-ae9ff5772609",
                            TwoFactorEnabled = false,
                            UserName = "pateint04@gmail.com"
                        },
                        new
                        {
                            Id = "Patient05",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "8047a82a-09ec-49d6-9244-47ad421abc92",
                            Email = "pateint05@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 05",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT05@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZeC+ciH3pQ67okhswYbyj3/vly0QzcHqTzeCTqejQEEwivZTvuGYckSiCL+Xn5Wg==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b7764c6-33b6-4eaa-b407-23ed59d65b50",
                            TwoFactorEnabled = false,
                            UserName = "pateint05@gmail.com"
                        },
                        new
                        {
                            Id = "Patient06",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "c094101f-63c5-4167-b894-20d9e15f0e82",
                            Email = "pateint06@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 1,
                            LastName = "Num 06",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT06@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED4i/s834qfgCEzBRHuILTr8XpfrRJOeksGKD7xR5UPKqixhpaiw6Wg8gPGVzmQakA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c965ccf0-e09c-4b95-acf1-2c1fe422d243",
                            TwoFactorEnabled = false,
                            UserName = "pateint06@gmail.com"
                        },
                        new
                        {
                            Id = "Patient07",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "ba27e012-6f23-4bb4-b771-8594e7c781a0",
                            Email = "pateint07@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 07",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT07@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEgE9HFgzWREnWj90T6zSRd2NlRoY1lnYc+Fh12AZDqOk8Qzmyelxaky7ylVcbda/w==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e451fbe-1f81-4ea8-ba1c-34a7e2a63be7",
                            TwoFactorEnabled = false,
                            UserName = "pateint07@gmail.com"
                        },
                        new
                        {
                            Id = "Patient08",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "80c3948a-b9cb-4b3a-ac4f-770fe20f87eb",
                            Email = "pateint08@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 08",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT08@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENY3zUSLyxSHwMEQ1gUMDVVML7JOfCnau4fdb9VhhD8EfK2FnZ/obPjmfxt2Y6DXjw==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83a0b3d0-e221-460c-a9aa-61091710868e",
                            TwoFactorEnabled = false,
                            UserName = "pateint08@gmail.com"
                        },
                        new
                        {
                            Id = "Patient09",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "7958090e-d256-45fb-97e9-4aa7be79b07e",
                            Email = "pateint09@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 09",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaYzIqCKRjaMlNHcST0tLk0Gsy9v+JWCVeYmTmvbTBcL0oreb2pa43d2OzQ16uI2A==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d97193c-2319-4160-9636-6360fded881a",
                            TwoFactorEnabled = false,
                            UserName = "pateint09@gmail.com"
                        },
                        new
                        {
                            Id = "Patient10",
                            AccessFailedCount = 0,
                            AccountType = 2,
                            ConcurrencyStamp = "1c405761-f64d-4935-9fb4-e161056757ee",
                            Email = "pateint10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patient",
                            Gender = 0,
                            LastName = "Num 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATEINT10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENQfj6smgfO7dLL2TMU8afcq/rIwPG351kwY4t2SjsacuBDkLRoeXSlNKfb3yNloUA==",
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97b7a447-35c4-488e-aa34-0e4738aba536",
                            TwoFactorEnabled = false,
                            UserName = "pateint10@gmail.com"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 0,
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 2,
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 6,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 1,
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 3,
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppointDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Day = 4,
                            DoctorId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DicountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NuberOfCompReqs")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DicountCode")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Doctor01",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror1Url",
                            Price = 100.0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Doctor02",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror2Url",
                            Price = 110.0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Doctor03",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror3Url",
                            Price = 105.0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Doctor04",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror4Url",
                            Price = 120.0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Doctor05",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror5Url",
                            Price = 90.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Doctor06",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror6Url",
                            Price = 140.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Doctor07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror7Url",
                            Price = 190.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Doctor08",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror8Url",
                            Price = 95.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Doctor09",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror9Url",
                            Price = 80.0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Doctor10",
                            DateOfBirth = new DateTime(1990, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImageDocror0Url",
                            Price = 135.0,
                            SpecializationId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "Patient01",
                            DateOfBirth = new DateTime(2000, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient1Url"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "Patient02",
                            DateOfBirth = new DateTime(2005, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient2Url"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "Patient03",
                            DateOfBirth = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient3Url"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "Patient04",
                            DateOfBirth = new DateTime(2017, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient4Url"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "Patient05",
                            DateOfBirth = new DateTime(1999, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient5Url"
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = "Patient06",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient06Url"
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = "Patient07",
                            DateOfBirth = new DateTime(1997, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient07Url"
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = "Patient08",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient08Url"
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = "Patient09",
                            DateOfBirth = new DateTime(1995, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient09Url"
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = "Patient10",
                            DateOfBirth = new DateTime(1994, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ImagePatient10Url"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId")
                        .IsUnique()
                        .HasFilter("[TimeId] IS NOT NULL");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 100.0,
                            RequestStatus = 0,
                            TimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsConfirmed = false,
                            PatientId = 1,
                            Price = 105.0,
                            RequestStatus = 0,
                            TimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 110.0,
                            RequestStatus = 0,
                            TimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            IsConfirmed = false,
                            PatientId = 2,
                            Price = 120.0,
                            RequestStatus = 0,
                            TimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 3,
                            IsConfirmed = false,
                            PatientId = 3,
                            Price = 90.0,
                            RequestStatus = 0,
                            TimeId = 5
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pathology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeOfAppointment")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            IsBooked = false,
                            TimeOfAppointment = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Vezeeta.Domain.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.HasOne("Vezeeta.Domain.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Vezeeta.Domain.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Vezeeta.Domain.Request", b =>
                {
                    b.HasOne("Vezeeta.Domain.Discount", "Discount")
                        .WithMany("Requests")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Vezeeta.Domain.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Domain.Time", "Time")
                        .WithOne("Request")
                        .HasForeignKey("Vezeeta.Domain.Request", "TimeId");

                    b.Navigation("Discount");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.HasOne("Vezeeta.Domain.Appointment", "Appointment")
                        .WithMany("Times")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Vezeeta.Domain.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Domain.Appointment", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Vezeeta.Domain.Discount", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Vezeeta.Domain.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Vezeeta.Domain.Time", b =>
                {
                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
